Terminals unused in grammar

   FOR
   LSB
   RSB
   QUOTA


State 22 conflicts: 1 shift/reduce
State 37 conflicts: 2 shift/reduce
State 86 conflicts: 1 shift/reduce
State 97 conflicts: 2 reduce/reduce
State 98 conflicts: 1 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 126 conflicts: 26 reduce/reduce
State 127 conflicts: 26 reduce/reduce
State 128 conflicts: 26 reduce/reduce
State 129 conflicts: 26 reduce/reduce
State 130 conflicts: 26 reduce/reduce
State 131 conflicts: 1 shift/reduce, 26 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | expression_stat
    5     | compound_stat
    6     | jump_stat
    7     | print_func
    8     | COMMENTLINE
    9     | NEWLINE

   10 declaration: type ID ASGN initializer
   11            | type ID
   12            | type ID LB parameter_list RB
   13            | type ID LB RB

   14 expression_stat: SEMICOLON
   15                | expr SEMICOLON

   16 expr: assignment_expr
   17     | expr COMMA assignment_expr

   18 assignment_expr: conditional_expr
   19                | unary_expr assignment_operator assignment_expr

   20 assignment_operator: ASGN
   21                    | MULASGN
   22                    | DIVASGN
   23                    | MODASGN
   24                    | ADDASGN
   25                    | SUBASGN

   26 conditional_expr: logical_or_expr

   27 logical_or_expr: logical_and_expr
   28                | logical_or_expr OR logical_and_expr

   29 logical_and_expr: relational_expr
   30                 | logical_and_expr AND relational_expr

   31 relational_expr: additive_expr
   32                | relational_expr EQ additive_expr
   33                | relational_expr NE additive_expr
   34                | relational_expr LT additive_expr
   35                | relational_expr MT additive_expr
   36                | relational_expr LTE additive_expr
   37                | relational_expr MTE additive_expr

   38 additive_expr: multiplicative_expr
   39              | additive_expr ADD multiplicative_expr
   40              | additive_expr SUB multiplicative_expr

   41 multiplicative_expr: cast_expr
   42                    | multiplicative_expr MUL cast_expr
   43                    | multiplicative_expr DIV cast_expr
   44                    | multiplicative_expr MOD cast_expr

   45 cast_expr: unary_expr
   46          | LB type RB cast_expr

   47 unary_expr: postfix_expr
   48           | unary_operator cast_expr

   49 unary_operator: ADD
   50               | SUB
   51               | NOT

   52 postfix_expr: primary_expr
   53             | ID LB RB
   54             | ID LB argument_list RB
   55             | postfix_expr INC
   56             | postfix_expr DEC

   57 primary_expr: val
   58             | LB expr RB

   59 compound_stat: IF LB expr RB LCB
   60              | RCB ELSE IF LB expr RB LCB
   61              | RCB ELSE LCB
   62              | WHILE LB expr RB LCB
   63              | type ID LB parameter_list RB LCB
   64              | type ID LB RB LCB
   65              | RCB

   66 jump_stat: CONT SEMICOLON
   67          | BREAK SEMICOLON
   68          | RET SEMICOLON
   69          | RET expr SEMICOLON

   70 print_func: PRINT LB STR_CONST RB
   71           | PRINT LB ID RB

   72 initializer: I_CONST
   73            | F_CONST
   74            | TRUE
   75            | FALSE
   76            | ID
   77            | STR_CONST
   78            | expr

   79 parameter_list: parameter
   80               | parameter_list COMMA parameter

   81 parameter: type ID

   82 argument_list: argument
   83              | argument_list COMMA argument

   84 argument: ID
   85         | expr

   86 val: ID
   87    | I_CONST
   88    | F_CONST
   89    | STR_CONST
   90    | TRUE
   91    | FALSE

   92 type: INT
   93     | FLOAT
   94     | BOOL
   95     | STRING
   96     | VOID


Terminals, with rules where they appear

$end (0) 0
error (256)
PRINT (258) 70 71
IF (259) 59 60
ELSE (260) 60 61
FOR (261)
WHILE (262) 62
SEMICOLON (263) 14 15 66 67 68 69
ADD (264) 39 49
SUB (265) 40 50
MUL (266) 42
DIV (267) 43
MOD (268) 44
INC (269) 55
DEC (270) 56
MT (271) 35
LT (272) 34
MTE (273) 37
LTE (274) 36
EQ (275) 32
NE (276) 33
ASGN (277) 10 20
ADDASGN (278) 24
SUBASGN (279) 25
MULASGN (280) 21
DIVASGN (281) 22
MODASGN (282) 23
AND (283) 30
OR (284) 28
NOT (285) 51
LB (286) 12 13 46 53 54 58 59 60 62 63 64 70 71
RB (287) 12 13 46 53 54 58 59 60 62 63 64 70 71
LCB (288) 59 60 61 62 63 64
RCB (289) 60 61 65
LSB (290)
RSB (291)
COMMA (292) 17 80 83
QUOTA (293)
TRUE (294) 74 90
FALSE (295) 75 91
COMMENTLINE (296) 8
NEWLINE (297) 9
RET (298) 68 69
CONT (299) 66
BREAK (300) 67
I_CONST (301) 72 87
F_CONST (302) 73 88
STR_CONST (303) 70 77 89
ID (304) 10 11 12 13 53 54 63 64 71 76 81 84 86
INT (305) 92
FLOAT (306) 93
BOOL (307) 94
STRING (308) 95
VOID (309) 96


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0 1
stat (57)
    on left: 3 4 5 6 7 8 9, on right: 1
declaration (58)
    on left: 10 11 12 13, on right: 3
expression_stat (59)
    on left: 14 15, on right: 4
expr (60)
    on left: 16 17, on right: 15 17 58 59 60 62 69 78 85
assignment_expr (61)
    on left: 18 19, on right: 16 17 19
assignment_operator (62)
    on left: 20 21 22 23 24 25, on right: 19
conditional_expr (63)
    on left: 26, on right: 18
logical_or_expr (64)
    on left: 27 28, on right: 26 28
logical_and_expr (65)
    on left: 29 30, on right: 27 28 30
relational_expr (66)
    on left: 31 32 33 34 35 36 37, on right: 29 30 32 33 34 35 36 37
additive_expr (67)
    on left: 38 39 40, on right: 31 32 33 34 35 36 37 39 40
multiplicative_expr (68)
    on left: 41 42 43 44, on right: 38 39 40 42 43 44
cast_expr (69)
    on left: 45 46, on right: 41 42 43 44 46 48
unary_expr (70)
    on left: 47 48, on right: 19 45
unary_operator (71)
    on left: 49 50 51, on right: 48
postfix_expr (72)
    on left: 52 53 54 55 56, on right: 47 55 56
primary_expr (73)
    on left: 57 58, on right: 52
compound_stat (74)
    on left: 59 60 61 62 63 64 65, on right: 5
jump_stat (75)
    on left: 66 67 68 69, on right: 6
print_func (76)
    on left: 70 71, on right: 7
initializer (77)
    on left: 72 73 74 75 76 77 78, on right: 10
parameter_list (78)
    on left: 79 80, on right: 12 63 80
parameter (79)
    on left: 81, on right: 79 80
argument_list (80)
    on left: 82 83, on right: 54 83
argument (81)
    on left: 84 85, on right: 82 83
val (82)
    on left: 86 87 88 89 90 91, on right: 57
type (83)
    on left: 92 93 94 95 96, on right: 10 11 12 13 46 63 64 81


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end         shift, and go to state 2
    PRINT        shift, and go to state 3
    IF           shift, and go to state 4
    WHILE        shift, and go to state 5
    SEMICOLON    shift, and go to state 6
    ADD          shift, and go to state 7
    SUB          shift, and go to state 8
    NOT          shift, and go to state 9
    LB           shift, and go to state 10
    RCB          shift, and go to state 11
    TRUE         shift, and go to state 12
    FALSE        shift, and go to state 13
    COMMENTLINE  shift, and go to state 14
    NEWLINE      shift, and go to state 15
    RET          shift, and go to state 16
    CONT         shift, and go to state 17
    BREAK        shift, and go to state 18
    I_CONST      shift, and go to state 19
    F_CONST      shift, and go to state 20
    STR_CONST    shift, and go to state 21
    ID           shift, and go to state 22
    INT          shift, and go to state 23
    FLOAT        shift, and go to state 24
    BOOL         shift, and go to state 25
    STRING       shift, and go to state 26
    VOID         shift, and go to state 27

    stat                 go to state 28
    declaration          go to state 29
    expression_stat      go to state 30
    expr                 go to state 31
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    compound_stat        go to state 44
    jump_stat            go to state 45
    print_func           go to state 46
    val                  go to state 47
    type                 go to state 48


State 2

    0 $accept: program $end .

    $default  accept


State 3

   70 print_func: PRINT . LB STR_CONST RB
   71           | PRINT . LB ID RB

    LB  shift, and go to state 49


State 4

   59 compound_stat: IF . LB expr RB LCB

    LB  shift, and go to state 50


State 5

   62 compound_stat: WHILE . LB expr RB LCB

    LB  shift, and go to state 51


State 6

   14 expression_stat: SEMICOLON .

    $default  reduce using rule 14 (expression_stat)


State 7

   49 unary_operator: ADD .

    $default  reduce using rule 49 (unary_operator)


State 8

   50 unary_operator: SUB .

    $default  reduce using rule 50 (unary_operator)


State 9

   51 unary_operator: NOT .

    $default  reduce using rule 51 (unary_operator)


State 10

   46 cast_expr: LB . type RB cast_expr
   58 primary_expr: LB . expr RB

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22
    INT        shift, and go to state 23
    FLOAT      shift, and go to state 24
    BOOL       shift, and go to state 25
    STRING     shift, and go to state 26
    VOID       shift, and go to state 27

    expr                 go to state 52
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47
    type                 go to state 53


State 11

   60 compound_stat: RCB . ELSE IF LB expr RB LCB
   61              | RCB . ELSE LCB
   65              | RCB .

    ELSE  shift, and go to state 54

    $default  reduce using rule 65 (compound_stat)


State 12

   90 val: TRUE .

    $default  reduce using rule 90 (val)


State 13

   91 val: FALSE .

    $default  reduce using rule 91 (val)


State 14

    8 stat: COMMENTLINE .

    $default  reduce using rule 8 (stat)


State 15

    9 stat: NEWLINE .

    $default  reduce using rule 9 (stat)


State 16

   68 jump_stat: RET . SEMICOLON
   69          | RET . expr SEMICOLON

    SEMICOLON  shift, and go to state 55
    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    expr                 go to state 56
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 17

   66 jump_stat: CONT . SEMICOLON

    SEMICOLON  shift, and go to state 57


State 18

   67 jump_stat: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 58


State 19

   87 val: I_CONST .

    $default  reduce using rule 87 (val)


State 20

   88 val: F_CONST .

    $default  reduce using rule 88 (val)


State 21

   89 val: STR_CONST .

    $default  reduce using rule 89 (val)


State 22

   53 postfix_expr: ID . LB RB
   54             | ID . LB argument_list RB
   86 val: ID .

    LB  shift, and go to state 59

    LB        [reduce using rule 86 (val)]
    $default  reduce using rule 86 (val)


State 23

   92 type: INT .

    $default  reduce using rule 92 (type)


State 24

   93 type: FLOAT .

    $default  reduce using rule 93 (type)


State 25

   94 type: BOOL .

    $default  reduce using rule 94 (type)


State 26

   95 type: STRING .

    $default  reduce using rule 95 (type)


State 27

   96 type: VOID .

    $default  reduce using rule 96 (type)


State 28

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 29

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 30

    4 stat: expression_stat .

    $default  reduce using rule 4 (stat)


State 31

   15 expression_stat: expr . SEMICOLON
   17 expr: expr . COMMA assignment_expr

    SEMICOLON  shift, and go to state 60
    COMMA      shift, and go to state 61


State 32

   16 expr: assignment_expr .

    $default  reduce using rule 16 (expr)


State 33

   18 assignment_expr: conditional_expr .

    $default  reduce using rule 18 (assignment_expr)


State 34

   26 conditional_expr: logical_or_expr .
   28 logical_or_expr: logical_or_expr . OR logical_and_expr

    OR  shift, and go to state 62

    $default  reduce using rule 26 (conditional_expr)


State 35

   27 logical_or_expr: logical_and_expr .
   30 logical_and_expr: logical_and_expr . AND relational_expr

    AND  shift, and go to state 63

    $default  reduce using rule 27 (logical_or_expr)


State 36

   29 logical_and_expr: relational_expr .
   32 relational_expr: relational_expr . EQ additive_expr
   33                | relational_expr . NE additive_expr
   34                | relational_expr . LT additive_expr
   35                | relational_expr . MT additive_expr
   36                | relational_expr . LTE additive_expr
   37                | relational_expr . MTE additive_expr

    MT   shift, and go to state 64
    LT   shift, and go to state 65
    MTE  shift, and go to state 66
    LTE  shift, and go to state 67
    EQ   shift, and go to state 68
    NE   shift, and go to state 69

    $default  reduce using rule 29 (logical_and_expr)


State 37

   31 relational_expr: additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 31 (relational_expr)]
    SUB       [reduce using rule 31 (relational_expr)]
    $default  reduce using rule 31 (relational_expr)


State 38

   38 additive_expr: multiplicative_expr .
   42 multiplicative_expr: multiplicative_expr . MUL cast_expr
   43                    | multiplicative_expr . DIV cast_expr
   44                    | multiplicative_expr . MOD cast_expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 38 (additive_expr)


State 39

   41 multiplicative_expr: cast_expr .

    $default  reduce using rule 41 (multiplicative_expr)


State 40

   19 assignment_expr: unary_expr . assignment_operator assignment_expr
   45 cast_expr: unary_expr .

    ASGN     shift, and go to state 75
    ADDASGN  shift, and go to state 76
    SUBASGN  shift, and go to state 77
    MULASGN  shift, and go to state 78
    DIVASGN  shift, and go to state 79
    MODASGN  shift, and go to state 80

    $default  reduce using rule 45 (cast_expr)

    assignment_operator  go to state 81


State 41

   48 unary_expr: unary_operator . cast_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    cast_expr       go to state 82
    unary_expr      go to state 83
    unary_operator  go to state 41
    postfix_expr    go to state 42
    primary_expr    go to state 43
    val             go to state 47


State 42

   47 unary_expr: postfix_expr .
   55 postfix_expr: postfix_expr . INC
   56             | postfix_expr . DEC

    INC  shift, and go to state 84
    DEC  shift, and go to state 85

    $default  reduce using rule 47 (unary_expr)


State 43

   52 postfix_expr: primary_expr .

    $default  reduce using rule 52 (postfix_expr)


State 44

    5 stat: compound_stat .

    $default  reduce using rule 5 (stat)


State 45

    6 stat: jump_stat .

    $default  reduce using rule 6 (stat)


State 46

    7 stat: print_func .

    $default  reduce using rule 7 (stat)


State 47

   57 primary_expr: val .

    $default  reduce using rule 57 (primary_expr)


State 48

   10 declaration: type . ID ASGN initializer
   11            | type . ID
   12            | type . ID LB parameter_list RB
   13            | type . ID LB RB
   63 compound_stat: type . ID LB parameter_list RB LCB
   64              | type . ID LB RB LCB

    ID  shift, and go to state 86


State 49

   70 print_func: PRINT LB . STR_CONST RB
   71           | PRINT LB . ID RB

    STR_CONST  shift, and go to state 87
    ID         shift, and go to state 88


State 50

   59 compound_stat: IF LB . expr RB LCB

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    expr                 go to state 89
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 51

   62 compound_stat: WHILE LB . expr RB LCB

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    expr                 go to state 90
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 52

   17 expr: expr . COMMA assignment_expr
   58 primary_expr: LB expr . RB

    RB     shift, and go to state 91
    COMMA  shift, and go to state 61


State 53

   46 cast_expr: LB type . RB cast_expr

    RB  shift, and go to state 92


State 54

   60 compound_stat: RCB ELSE . IF LB expr RB LCB
   61              | RCB ELSE . LCB

    IF   shift, and go to state 93
    LCB  shift, and go to state 94


State 55

   68 jump_stat: RET SEMICOLON .

    $default  reduce using rule 68 (jump_stat)


State 56

   17 expr: expr . COMMA assignment_expr
   69 jump_stat: RET expr . SEMICOLON

    SEMICOLON  shift, and go to state 95
    COMMA      shift, and go to state 61


State 57

   66 jump_stat: CONT SEMICOLON .

    $default  reduce using rule 66 (jump_stat)


State 58

   67 jump_stat: BREAK SEMICOLON .

    $default  reduce using rule 67 (jump_stat)


State 59

   53 postfix_expr: ID LB . RB
   54             | ID LB . argument_list RB

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    RB         shift, and go to state 96
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 97

    expr                 go to state 98
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    argument_list        go to state 99
    argument             go to state 100
    val                  go to state 47


State 60

   15 expression_stat: expr SEMICOLON .

    $default  reduce using rule 15 (expression_stat)


State 61

   17 expr: expr COMMA . assignment_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    assignment_expr      go to state 101
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 62

   28 logical_or_expr: logical_or_expr OR . logical_and_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    logical_and_expr     go to state 102
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 63

   30 logical_and_expr: logical_and_expr AND . relational_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    relational_expr      go to state 103
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 64

   35 relational_expr: relational_expr MT . additive_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    additive_expr        go to state 104
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 65

   34 relational_expr: relational_expr LT . additive_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    additive_expr        go to state 105
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 66

   37 relational_expr: relational_expr MTE . additive_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    additive_expr        go to state 106
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 67

   36 relational_expr: relational_expr LTE . additive_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    additive_expr        go to state 107
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 68

   32 relational_expr: relational_expr EQ . additive_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    additive_expr        go to state 108
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 69

   33 relational_expr: relational_expr NE . additive_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    additive_expr        go to state 109
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 70

   39 additive_expr: additive_expr ADD . multiplicative_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    multiplicative_expr  go to state 110
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 71

   40 additive_expr: additive_expr SUB . multiplicative_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    multiplicative_expr  go to state 111
    cast_expr            go to state 39
    unary_expr           go to state 83
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 72

   42 multiplicative_expr: multiplicative_expr MUL . cast_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    cast_expr       go to state 112
    unary_expr      go to state 83
    unary_operator  go to state 41
    postfix_expr    go to state 42
    primary_expr    go to state 43
    val             go to state 47


State 73

   43 multiplicative_expr: multiplicative_expr DIV . cast_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    cast_expr       go to state 113
    unary_expr      go to state 83
    unary_operator  go to state 41
    postfix_expr    go to state 42
    primary_expr    go to state 43
    val             go to state 47


State 74

   44 multiplicative_expr: multiplicative_expr MOD . cast_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    cast_expr       go to state 114
    unary_expr      go to state 83
    unary_operator  go to state 41
    postfix_expr    go to state 42
    primary_expr    go to state 43
    val             go to state 47


State 75

   20 assignment_operator: ASGN .

    $default  reduce using rule 20 (assignment_operator)


State 76

   24 assignment_operator: ADDASGN .

    $default  reduce using rule 24 (assignment_operator)


State 77

   25 assignment_operator: SUBASGN .

    $default  reduce using rule 25 (assignment_operator)


State 78

   21 assignment_operator: MULASGN .

    $default  reduce using rule 21 (assignment_operator)


State 79

   22 assignment_operator: DIVASGN .

    $default  reduce using rule 22 (assignment_operator)


State 80

   23 assignment_operator: MODASGN .

    $default  reduce using rule 23 (assignment_operator)


State 81

   19 assignment_expr: unary_expr assignment_operator . assignment_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    assignment_expr      go to state 115
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 82

   48 unary_expr: unary_operator cast_expr .

    $default  reduce using rule 48 (unary_expr)


State 83

   45 cast_expr: unary_expr .

    $default  reduce using rule 45 (cast_expr)


State 84

   55 postfix_expr: postfix_expr INC .

    $default  reduce using rule 55 (postfix_expr)


State 85

   56 postfix_expr: postfix_expr DEC .

    $default  reduce using rule 56 (postfix_expr)


State 86

   10 declaration: type ID . ASGN initializer
   11            | type ID .
   12            | type ID . LB parameter_list RB
   13            | type ID . LB RB
   63 compound_stat: type ID . LB parameter_list RB LCB
   64              | type ID . LB RB LCB

    ASGN  shift, and go to state 116
    LB    shift, and go to state 117

    LB        [reduce using rule 11 (declaration)]
    $default  reduce using rule 11 (declaration)


State 87

   70 print_func: PRINT LB STR_CONST . RB

    RB  shift, and go to state 118


State 88

   71 print_func: PRINT LB ID . RB

    RB  shift, and go to state 119


State 89

   17 expr: expr . COMMA assignment_expr
   59 compound_stat: IF LB expr . RB LCB

    RB     shift, and go to state 120
    COMMA  shift, and go to state 61


State 90

   17 expr: expr . COMMA assignment_expr
   62 compound_stat: WHILE LB expr . RB LCB

    RB     shift, and go to state 121
    COMMA  shift, and go to state 61


State 91

   58 primary_expr: LB expr RB .

    $default  reduce using rule 58 (primary_expr)


State 92

   46 cast_expr: LB type RB . cast_expr

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    cast_expr       go to state 122
    unary_expr      go to state 83
    unary_operator  go to state 41
    postfix_expr    go to state 42
    primary_expr    go to state 43
    val             go to state 47


State 93

   60 compound_stat: RCB ELSE IF . LB expr RB LCB

    LB  shift, and go to state 123


State 94

   61 compound_stat: RCB ELSE LCB .

    $default  reduce using rule 61 (compound_stat)


State 95

   69 jump_stat: RET expr SEMICOLON .

    $default  reduce using rule 69 (jump_stat)


State 96

   53 postfix_expr: ID LB RB .

    $default  reduce using rule 53 (postfix_expr)


State 97

   53 postfix_expr: ID . LB RB
   54             | ID . LB argument_list RB
   84 argument: ID .
   86 val: ID .

    LB  shift, and go to state 59

    RB        reduce using rule 84 (argument)
    RB        [reduce using rule 86 (val)]
    COMMA     reduce using rule 84 (argument)
    COMMA     [reduce using rule 86 (val)]
    $default  reduce using rule 86 (val)


State 98

   17 expr: expr . COMMA assignment_expr
   85 argument: expr .

    COMMA  shift, and go to state 61

    COMMA     [reduce using rule 85 (argument)]
    $default  reduce using rule 85 (argument)


State 99

   54 postfix_expr: ID LB argument_list . RB
   83 argument_list: argument_list . COMMA argument

    RB     shift, and go to state 124
    COMMA  shift, and go to state 125


State 100

   82 argument_list: argument .

    $default  reduce using rule 82 (argument_list)


State 101

   17 expr: expr COMMA assignment_expr .

    $default  reduce using rule 17 (expr)


State 102

   28 logical_or_expr: logical_or_expr OR logical_and_expr .
   30 logical_and_expr: logical_and_expr . AND relational_expr

    AND  shift, and go to state 63

    $default  reduce using rule 28 (logical_or_expr)


State 103

   30 logical_and_expr: logical_and_expr AND relational_expr .
   32 relational_expr: relational_expr . EQ additive_expr
   33                | relational_expr . NE additive_expr
   34                | relational_expr . LT additive_expr
   35                | relational_expr . MT additive_expr
   36                | relational_expr . LTE additive_expr
   37                | relational_expr . MTE additive_expr

    MT   shift, and go to state 64
    LT   shift, and go to state 65
    MTE  shift, and go to state 66
    LTE  shift, and go to state 67
    EQ   shift, and go to state 68
    NE   shift, and go to state 69

    $default  reduce using rule 30 (logical_and_expr)


State 104

   35 relational_expr: relational_expr MT additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 35 (relational_expr)]
    SUB       [reduce using rule 35 (relational_expr)]
    $default  reduce using rule 35 (relational_expr)


State 105

   34 relational_expr: relational_expr LT additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 34 (relational_expr)]
    SUB       [reduce using rule 34 (relational_expr)]
    $default  reduce using rule 34 (relational_expr)


State 106

   37 relational_expr: relational_expr MTE additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 37 (relational_expr)]
    SUB       [reduce using rule 37 (relational_expr)]
    $default  reduce using rule 37 (relational_expr)


State 107

   36 relational_expr: relational_expr LTE additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 36 (relational_expr)]
    SUB       [reduce using rule 36 (relational_expr)]
    $default  reduce using rule 36 (relational_expr)


State 108

   32 relational_expr: relational_expr EQ additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 32 (relational_expr)]
    SUB       [reduce using rule 32 (relational_expr)]
    $default  reduce using rule 32 (relational_expr)


State 109

   33 relational_expr: relational_expr NE additive_expr .
   39 additive_expr: additive_expr . ADD multiplicative_expr
   40              | additive_expr . SUB multiplicative_expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71

    ADD       [reduce using rule 33 (relational_expr)]
    SUB       [reduce using rule 33 (relational_expr)]
    $default  reduce using rule 33 (relational_expr)


State 110

   39 additive_expr: additive_expr ADD multiplicative_expr .
   42 multiplicative_expr: multiplicative_expr . MUL cast_expr
   43                    | multiplicative_expr . DIV cast_expr
   44                    | multiplicative_expr . MOD cast_expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 39 (additive_expr)


State 111

   40 additive_expr: additive_expr SUB multiplicative_expr .
   42 multiplicative_expr: multiplicative_expr . MUL cast_expr
   43                    | multiplicative_expr . DIV cast_expr
   44                    | multiplicative_expr . MOD cast_expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 40 (additive_expr)


State 112

   42 multiplicative_expr: multiplicative_expr MUL cast_expr .

    $default  reduce using rule 42 (multiplicative_expr)


State 113

   43 multiplicative_expr: multiplicative_expr DIV cast_expr .

    $default  reduce using rule 43 (multiplicative_expr)


State 114

   44 multiplicative_expr: multiplicative_expr MOD cast_expr .

    $default  reduce using rule 44 (multiplicative_expr)


State 115

   19 assignment_expr: unary_expr assignment_operator assignment_expr .

    $default  reduce using rule 19 (assignment_expr)


State 116

   10 declaration: type ID ASGN . initializer

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 126
    FALSE      shift, and go to state 127
    I_CONST    shift, and go to state 128
    F_CONST    shift, and go to state 129
    STR_CONST  shift, and go to state 130
    ID         shift, and go to state 131

    expr                 go to state 132
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    initializer          go to state 133
    val                  go to state 47


State 117

   12 declaration: type ID LB . parameter_list RB
   13            | type ID LB . RB
   63 compound_stat: type ID LB . parameter_list RB LCB
   64              | type ID LB . RB LCB

    RB      shift, and go to state 134
    INT     shift, and go to state 23
    FLOAT   shift, and go to state 24
    BOOL    shift, and go to state 25
    STRING  shift, and go to state 26
    VOID    shift, and go to state 27

    parameter_list  go to state 135
    parameter       go to state 136
    type            go to state 137


State 118

   70 print_func: PRINT LB STR_CONST RB .

    $default  reduce using rule 70 (print_func)


State 119

   71 print_func: PRINT LB ID RB .

    $default  reduce using rule 71 (print_func)


State 120

   59 compound_stat: IF LB expr RB . LCB

    LCB  shift, and go to state 138


State 121

   62 compound_stat: WHILE LB expr RB . LCB

    LCB  shift, and go to state 139


State 122

   46 cast_expr: LB type RB cast_expr .

    $default  reduce using rule 46 (cast_expr)


State 123

   60 compound_stat: RCB ELSE IF LB . expr RB LCB

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 22

    expr                 go to state 140
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    val                  go to state 47


State 124

   54 postfix_expr: ID LB argument_list RB .

    $default  reduce using rule 54 (postfix_expr)


State 125

   83 argument_list: argument_list COMMA . argument

    ADD        shift, and go to state 7
    SUB        shift, and go to state 8
    NOT        shift, and go to state 9
    LB         shift, and go to state 10
    TRUE       shift, and go to state 12
    FALSE      shift, and go to state 13
    I_CONST    shift, and go to state 19
    F_CONST    shift, and go to state 20
    STR_CONST  shift, and go to state 21
    ID         shift, and go to state 97

    expr                 go to state 98
    assignment_expr      go to state 32
    conditional_expr     go to state 33
    logical_or_expr      go to state 34
    logical_and_expr     go to state 35
    relational_expr      go to state 36
    additive_expr        go to state 37
    multiplicative_expr  go to state 38
    cast_expr            go to state 39
    unary_expr           go to state 40
    unary_operator       go to state 41
    postfix_expr         go to state 42
    primary_expr         go to state 43
    argument             go to state 141
    val                  go to state 47


State 126

   74 initializer: TRUE .
   90 val: TRUE .

    $end         reduce using rule 74 (initializer)
    $end         [reduce using rule 90 (val)]
    PRINT        reduce using rule 74 (initializer)
    PRINT        [reduce using rule 90 (val)]
    IF           reduce using rule 74 (initializer)
    IF           [reduce using rule 90 (val)]
    WHILE        reduce using rule 74 (initializer)
    WHILE        [reduce using rule 90 (val)]
    SEMICOLON    reduce using rule 74 (initializer)
    SEMICOLON    [reduce using rule 90 (val)]
    ADD          reduce using rule 74 (initializer)
    ADD          [reduce using rule 90 (val)]
    SUB          reduce using rule 74 (initializer)
    SUB          [reduce using rule 90 (val)]
    MUL          reduce using rule 90 (val)
    DIV          reduce using rule 90 (val)
    MOD          reduce using rule 90 (val)
    INC          reduce using rule 90 (val)
    DEC          reduce using rule 90 (val)
    MT           reduce using rule 90 (val)
    LT           reduce using rule 90 (val)
    MTE          reduce using rule 90 (val)
    LTE          reduce using rule 90 (val)
    EQ           reduce using rule 90 (val)
    NE           reduce using rule 90 (val)
    ASGN         reduce using rule 90 (val)
    ADDASGN      reduce using rule 90 (val)
    SUBASGN      reduce using rule 90 (val)
    MULASGN      reduce using rule 90 (val)
    DIVASGN      reduce using rule 90 (val)
    MODASGN      reduce using rule 90 (val)
    AND          reduce using rule 90 (val)
    OR           reduce using rule 90 (val)
    NOT          reduce using rule 74 (initializer)
    NOT          [reduce using rule 90 (val)]
    LB           reduce using rule 74 (initializer)
    LB           [reduce using rule 90 (val)]
    RCB          reduce using rule 74 (initializer)
    RCB          [reduce using rule 90 (val)]
    COMMA        reduce using rule 90 (val)
    TRUE         reduce using rule 74 (initializer)
    TRUE         [reduce using rule 90 (val)]
    FALSE        reduce using rule 74 (initializer)
    FALSE        [reduce using rule 90 (val)]
    COMMENTLINE  reduce using rule 74 (initializer)
    COMMENTLINE  [reduce using rule 90 (val)]
    NEWLINE      reduce using rule 74 (initializer)
    NEWLINE      [reduce using rule 90 (val)]
    RET          reduce using rule 74 (initializer)
    RET          [reduce using rule 90 (val)]
    CONT         reduce using rule 74 (initializer)
    CONT         [reduce using rule 90 (val)]
    BREAK        reduce using rule 74 (initializer)
    BREAK        [reduce using rule 90 (val)]
    I_CONST      reduce using rule 74 (initializer)
    I_CONST      [reduce using rule 90 (val)]
    F_CONST      reduce using rule 74 (initializer)
    F_CONST      [reduce using rule 90 (val)]
    STR_CONST    reduce using rule 74 (initializer)
    STR_CONST    [reduce using rule 90 (val)]
    ID           reduce using rule 74 (initializer)
    ID           [reduce using rule 90 (val)]
    INT          reduce using rule 74 (initializer)
    INT          [reduce using rule 90 (val)]
    FLOAT        reduce using rule 74 (initializer)
    FLOAT        [reduce using rule 90 (val)]
    BOOL         reduce using rule 74 (initializer)
    BOOL         [reduce using rule 90 (val)]
    STRING       reduce using rule 74 (initializer)
    STRING       [reduce using rule 90 (val)]
    VOID         reduce using rule 74 (initializer)
    VOID         [reduce using rule 90 (val)]
    $default     reduce using rule 74 (initializer)


State 127

   75 initializer: FALSE .
   91 val: FALSE .

    $end         reduce using rule 75 (initializer)
    $end         [reduce using rule 91 (val)]
    PRINT        reduce using rule 75 (initializer)
    PRINT        [reduce using rule 91 (val)]
    IF           reduce using rule 75 (initializer)
    IF           [reduce using rule 91 (val)]
    WHILE        reduce using rule 75 (initializer)
    WHILE        [reduce using rule 91 (val)]
    SEMICOLON    reduce using rule 75 (initializer)
    SEMICOLON    [reduce using rule 91 (val)]
    ADD          reduce using rule 75 (initializer)
    ADD          [reduce using rule 91 (val)]
    SUB          reduce using rule 75 (initializer)
    SUB          [reduce using rule 91 (val)]
    MUL          reduce using rule 91 (val)
    DIV          reduce using rule 91 (val)
    MOD          reduce using rule 91 (val)
    INC          reduce using rule 91 (val)
    DEC          reduce using rule 91 (val)
    MT           reduce using rule 91 (val)
    LT           reduce using rule 91 (val)
    MTE          reduce using rule 91 (val)
    LTE          reduce using rule 91 (val)
    EQ           reduce using rule 91 (val)
    NE           reduce using rule 91 (val)
    ASGN         reduce using rule 91 (val)
    ADDASGN      reduce using rule 91 (val)
    SUBASGN      reduce using rule 91 (val)
    MULASGN      reduce using rule 91 (val)
    DIVASGN      reduce using rule 91 (val)
    MODASGN      reduce using rule 91 (val)
    AND          reduce using rule 91 (val)
    OR           reduce using rule 91 (val)
    NOT          reduce using rule 75 (initializer)
    NOT          [reduce using rule 91 (val)]
    LB           reduce using rule 75 (initializer)
    LB           [reduce using rule 91 (val)]
    RCB          reduce using rule 75 (initializer)
    RCB          [reduce using rule 91 (val)]
    COMMA        reduce using rule 91 (val)
    TRUE         reduce using rule 75 (initializer)
    TRUE         [reduce using rule 91 (val)]
    FALSE        reduce using rule 75 (initializer)
    FALSE        [reduce using rule 91 (val)]
    COMMENTLINE  reduce using rule 75 (initializer)
    COMMENTLINE  [reduce using rule 91 (val)]
    NEWLINE      reduce using rule 75 (initializer)
    NEWLINE      [reduce using rule 91 (val)]
    RET          reduce using rule 75 (initializer)
    RET          [reduce using rule 91 (val)]
    CONT         reduce using rule 75 (initializer)
    CONT         [reduce using rule 91 (val)]
    BREAK        reduce using rule 75 (initializer)
    BREAK        [reduce using rule 91 (val)]
    I_CONST      reduce using rule 75 (initializer)
    I_CONST      [reduce using rule 91 (val)]
    F_CONST      reduce using rule 75 (initializer)
    F_CONST      [reduce using rule 91 (val)]
    STR_CONST    reduce using rule 75 (initializer)
    STR_CONST    [reduce using rule 91 (val)]
    ID           reduce using rule 75 (initializer)
    ID           [reduce using rule 91 (val)]
    INT          reduce using rule 75 (initializer)
    INT          [reduce using rule 91 (val)]
    FLOAT        reduce using rule 75 (initializer)
    FLOAT        [reduce using rule 91 (val)]
    BOOL         reduce using rule 75 (initializer)
    BOOL         [reduce using rule 91 (val)]
    STRING       reduce using rule 75 (initializer)
    STRING       [reduce using rule 91 (val)]
    VOID         reduce using rule 75 (initializer)
    VOID         [reduce using rule 91 (val)]
    $default     reduce using rule 75 (initializer)


State 128

   72 initializer: I_CONST .
   87 val: I_CONST .

    $end         reduce using rule 72 (initializer)
    $end         [reduce using rule 87 (val)]
    PRINT        reduce using rule 72 (initializer)
    PRINT        [reduce using rule 87 (val)]
    IF           reduce using rule 72 (initializer)
    IF           [reduce using rule 87 (val)]
    WHILE        reduce using rule 72 (initializer)
    WHILE        [reduce using rule 87 (val)]
    SEMICOLON    reduce using rule 72 (initializer)
    SEMICOLON    [reduce using rule 87 (val)]
    ADD          reduce using rule 72 (initializer)
    ADD          [reduce using rule 87 (val)]
    SUB          reduce using rule 72 (initializer)
    SUB          [reduce using rule 87 (val)]
    MUL          reduce using rule 87 (val)
    DIV          reduce using rule 87 (val)
    MOD          reduce using rule 87 (val)
    INC          reduce using rule 87 (val)
    DEC          reduce using rule 87 (val)
    MT           reduce using rule 87 (val)
    LT           reduce using rule 87 (val)
    MTE          reduce using rule 87 (val)
    LTE          reduce using rule 87 (val)
    EQ           reduce using rule 87 (val)
    NE           reduce using rule 87 (val)
    ASGN         reduce using rule 87 (val)
    ADDASGN      reduce using rule 87 (val)
    SUBASGN      reduce using rule 87 (val)
    MULASGN      reduce using rule 87 (val)
    DIVASGN      reduce using rule 87 (val)
    MODASGN      reduce using rule 87 (val)
    AND          reduce using rule 87 (val)
    OR           reduce using rule 87 (val)
    NOT          reduce using rule 72 (initializer)
    NOT          [reduce using rule 87 (val)]
    LB           reduce using rule 72 (initializer)
    LB           [reduce using rule 87 (val)]
    RCB          reduce using rule 72 (initializer)
    RCB          [reduce using rule 87 (val)]
    COMMA        reduce using rule 87 (val)
    TRUE         reduce using rule 72 (initializer)
    TRUE         [reduce using rule 87 (val)]
    FALSE        reduce using rule 72 (initializer)
    FALSE        [reduce using rule 87 (val)]
    COMMENTLINE  reduce using rule 72 (initializer)
    COMMENTLINE  [reduce using rule 87 (val)]
    NEWLINE      reduce using rule 72 (initializer)
    NEWLINE      [reduce using rule 87 (val)]
    RET          reduce using rule 72 (initializer)
    RET          [reduce using rule 87 (val)]
    CONT         reduce using rule 72 (initializer)
    CONT         [reduce using rule 87 (val)]
    BREAK        reduce using rule 72 (initializer)
    BREAK        [reduce using rule 87 (val)]
    I_CONST      reduce using rule 72 (initializer)
    I_CONST      [reduce using rule 87 (val)]
    F_CONST      reduce using rule 72 (initializer)
    F_CONST      [reduce using rule 87 (val)]
    STR_CONST    reduce using rule 72 (initializer)
    STR_CONST    [reduce using rule 87 (val)]
    ID           reduce using rule 72 (initializer)
    ID           [reduce using rule 87 (val)]
    INT          reduce using rule 72 (initializer)
    INT          [reduce using rule 87 (val)]
    FLOAT        reduce using rule 72 (initializer)
    FLOAT        [reduce using rule 87 (val)]
    BOOL         reduce using rule 72 (initializer)
    BOOL         [reduce using rule 87 (val)]
    STRING       reduce using rule 72 (initializer)
    STRING       [reduce using rule 87 (val)]
    VOID         reduce using rule 72 (initializer)
    VOID         [reduce using rule 87 (val)]
    $default     reduce using rule 72 (initializer)


State 129

   73 initializer: F_CONST .
   88 val: F_CONST .

    $end         reduce using rule 73 (initializer)
    $end         [reduce using rule 88 (val)]
    PRINT        reduce using rule 73 (initializer)
    PRINT        [reduce using rule 88 (val)]
    IF           reduce using rule 73 (initializer)
    IF           [reduce using rule 88 (val)]
    WHILE        reduce using rule 73 (initializer)
    WHILE        [reduce using rule 88 (val)]
    SEMICOLON    reduce using rule 73 (initializer)
    SEMICOLON    [reduce using rule 88 (val)]
    ADD          reduce using rule 73 (initializer)
    ADD          [reduce using rule 88 (val)]
    SUB          reduce using rule 73 (initializer)
    SUB          [reduce using rule 88 (val)]
    MUL          reduce using rule 88 (val)
    DIV          reduce using rule 88 (val)
    MOD          reduce using rule 88 (val)
    INC          reduce using rule 88 (val)
    DEC          reduce using rule 88 (val)
    MT           reduce using rule 88 (val)
    LT           reduce using rule 88 (val)
    MTE          reduce using rule 88 (val)
    LTE          reduce using rule 88 (val)
    EQ           reduce using rule 88 (val)
    NE           reduce using rule 88 (val)
    ASGN         reduce using rule 88 (val)
    ADDASGN      reduce using rule 88 (val)
    SUBASGN      reduce using rule 88 (val)
    MULASGN      reduce using rule 88 (val)
    DIVASGN      reduce using rule 88 (val)
    MODASGN      reduce using rule 88 (val)
    AND          reduce using rule 88 (val)
    OR           reduce using rule 88 (val)
    NOT          reduce using rule 73 (initializer)
    NOT          [reduce using rule 88 (val)]
    LB           reduce using rule 73 (initializer)
    LB           [reduce using rule 88 (val)]
    RCB          reduce using rule 73 (initializer)
    RCB          [reduce using rule 88 (val)]
    COMMA        reduce using rule 88 (val)
    TRUE         reduce using rule 73 (initializer)
    TRUE         [reduce using rule 88 (val)]
    FALSE        reduce using rule 73 (initializer)
    FALSE        [reduce using rule 88 (val)]
    COMMENTLINE  reduce using rule 73 (initializer)
    COMMENTLINE  [reduce using rule 88 (val)]
    NEWLINE      reduce using rule 73 (initializer)
    NEWLINE      [reduce using rule 88 (val)]
    RET          reduce using rule 73 (initializer)
    RET          [reduce using rule 88 (val)]
    CONT         reduce using rule 73 (initializer)
    CONT         [reduce using rule 88 (val)]
    BREAK        reduce using rule 73 (initializer)
    BREAK        [reduce using rule 88 (val)]
    I_CONST      reduce using rule 73 (initializer)
    I_CONST      [reduce using rule 88 (val)]
    F_CONST      reduce using rule 73 (initializer)
    F_CONST      [reduce using rule 88 (val)]
    STR_CONST    reduce using rule 73 (initializer)
    STR_CONST    [reduce using rule 88 (val)]
    ID           reduce using rule 73 (initializer)
    ID           [reduce using rule 88 (val)]
    INT          reduce using rule 73 (initializer)
    INT          [reduce using rule 88 (val)]
    FLOAT        reduce using rule 73 (initializer)
    FLOAT        [reduce using rule 88 (val)]
    BOOL         reduce using rule 73 (initializer)
    BOOL         [reduce using rule 88 (val)]
    STRING       reduce using rule 73 (initializer)
    STRING       [reduce using rule 88 (val)]
    VOID         reduce using rule 73 (initializer)
    VOID         [reduce using rule 88 (val)]
    $default     reduce using rule 73 (initializer)


State 130

   77 initializer: STR_CONST .
   89 val: STR_CONST .

    $end         reduce using rule 77 (initializer)
    $end         [reduce using rule 89 (val)]
    PRINT        reduce using rule 77 (initializer)
    PRINT        [reduce using rule 89 (val)]
    IF           reduce using rule 77 (initializer)
    IF           [reduce using rule 89 (val)]
    WHILE        reduce using rule 77 (initializer)
    WHILE        [reduce using rule 89 (val)]
    SEMICOLON    reduce using rule 77 (initializer)
    SEMICOLON    [reduce using rule 89 (val)]
    ADD          reduce using rule 77 (initializer)
    ADD          [reduce using rule 89 (val)]
    SUB          reduce using rule 77 (initializer)
    SUB          [reduce using rule 89 (val)]
    MUL          reduce using rule 89 (val)
    DIV          reduce using rule 89 (val)
    MOD          reduce using rule 89 (val)
    INC          reduce using rule 89 (val)
    DEC          reduce using rule 89 (val)
    MT           reduce using rule 89 (val)
    LT           reduce using rule 89 (val)
    MTE          reduce using rule 89 (val)
    LTE          reduce using rule 89 (val)
    EQ           reduce using rule 89 (val)
    NE           reduce using rule 89 (val)
    ASGN         reduce using rule 89 (val)
    ADDASGN      reduce using rule 89 (val)
    SUBASGN      reduce using rule 89 (val)
    MULASGN      reduce using rule 89 (val)
    DIVASGN      reduce using rule 89 (val)
    MODASGN      reduce using rule 89 (val)
    AND          reduce using rule 89 (val)
    OR           reduce using rule 89 (val)
    NOT          reduce using rule 77 (initializer)
    NOT          [reduce using rule 89 (val)]
    LB           reduce using rule 77 (initializer)
    LB           [reduce using rule 89 (val)]
    RCB          reduce using rule 77 (initializer)
    RCB          [reduce using rule 89 (val)]
    COMMA        reduce using rule 89 (val)
    TRUE         reduce using rule 77 (initializer)
    TRUE         [reduce using rule 89 (val)]
    FALSE        reduce using rule 77 (initializer)
    FALSE        [reduce using rule 89 (val)]
    COMMENTLINE  reduce using rule 77 (initializer)
    COMMENTLINE  [reduce using rule 89 (val)]
    NEWLINE      reduce using rule 77 (initializer)
    NEWLINE      [reduce using rule 89 (val)]
    RET          reduce using rule 77 (initializer)
    RET          [reduce using rule 89 (val)]
    CONT         reduce using rule 77 (initializer)
    CONT         [reduce using rule 89 (val)]
    BREAK        reduce using rule 77 (initializer)
    BREAK        [reduce using rule 89 (val)]
    I_CONST      reduce using rule 77 (initializer)
    I_CONST      [reduce using rule 89 (val)]
    F_CONST      reduce using rule 77 (initializer)
    F_CONST      [reduce using rule 89 (val)]
    STR_CONST    reduce using rule 77 (initializer)
    STR_CONST    [reduce using rule 89 (val)]
    ID           reduce using rule 77 (initializer)
    ID           [reduce using rule 89 (val)]
    INT          reduce using rule 77 (initializer)
    INT          [reduce using rule 89 (val)]
    FLOAT        reduce using rule 77 (initializer)
    FLOAT        [reduce using rule 89 (val)]
    BOOL         reduce using rule 77 (initializer)
    BOOL         [reduce using rule 89 (val)]
    STRING       reduce using rule 77 (initializer)
    STRING       [reduce using rule 89 (val)]
    VOID         reduce using rule 77 (initializer)
    VOID         [reduce using rule 89 (val)]
    $default     reduce using rule 77 (initializer)


State 131

   53 postfix_expr: ID . LB RB
   54             | ID . LB argument_list RB
   76 initializer: ID .
   86 val: ID .

    LB  shift, and go to state 59

    $end         reduce using rule 76 (initializer)
    $end         [reduce using rule 86 (val)]
    PRINT        reduce using rule 76 (initializer)
    PRINT        [reduce using rule 86 (val)]
    IF           reduce using rule 76 (initializer)
    IF           [reduce using rule 86 (val)]
    WHILE        reduce using rule 76 (initializer)
    WHILE        [reduce using rule 86 (val)]
    SEMICOLON    reduce using rule 76 (initializer)
    SEMICOLON    [reduce using rule 86 (val)]
    ADD          reduce using rule 76 (initializer)
    ADD          [reduce using rule 86 (val)]
    SUB          reduce using rule 76 (initializer)
    SUB          [reduce using rule 86 (val)]
    MUL          reduce using rule 86 (val)
    DIV          reduce using rule 86 (val)
    MOD          reduce using rule 86 (val)
    INC          reduce using rule 86 (val)
    DEC          reduce using rule 86 (val)
    MT           reduce using rule 86 (val)
    LT           reduce using rule 86 (val)
    MTE          reduce using rule 86 (val)
    LTE          reduce using rule 86 (val)
    EQ           reduce using rule 86 (val)
    NE           reduce using rule 86 (val)
    ASGN         reduce using rule 86 (val)
    ADDASGN      reduce using rule 86 (val)
    SUBASGN      reduce using rule 86 (val)
    MULASGN      reduce using rule 86 (val)
    DIVASGN      reduce using rule 86 (val)
    MODASGN      reduce using rule 86 (val)
    AND          reduce using rule 86 (val)
    OR           reduce using rule 86 (val)
    NOT          reduce using rule 76 (initializer)
    NOT          [reduce using rule 86 (val)]
    LB           [reduce using rule 76 (initializer)]
    LB           [reduce using rule 86 (val)]
    RCB          reduce using rule 76 (initializer)
    RCB          [reduce using rule 86 (val)]
    COMMA        reduce using rule 86 (val)
    TRUE         reduce using rule 76 (initializer)
    TRUE         [reduce using rule 86 (val)]
    FALSE        reduce using rule 76 (initializer)
    FALSE        [reduce using rule 86 (val)]
    COMMENTLINE  reduce using rule 76 (initializer)
    COMMENTLINE  [reduce using rule 86 (val)]
    NEWLINE      reduce using rule 76 (initializer)
    NEWLINE      [reduce using rule 86 (val)]
    RET          reduce using rule 76 (initializer)
    RET          [reduce using rule 86 (val)]
    CONT         reduce using rule 76 (initializer)
    CONT         [reduce using rule 86 (val)]
    BREAK        reduce using rule 76 (initializer)
    BREAK        [reduce using rule 86 (val)]
    I_CONST      reduce using rule 76 (initializer)
    I_CONST      [reduce using rule 86 (val)]
    F_CONST      reduce using rule 76 (initializer)
    F_CONST      [reduce using rule 86 (val)]
    STR_CONST    reduce using rule 76 (initializer)
    STR_CONST    [reduce using rule 86 (val)]
    ID           reduce using rule 76 (initializer)
    ID           [reduce using rule 86 (val)]
    INT          reduce using rule 76 (initializer)
    INT          [reduce using rule 86 (val)]
    FLOAT        reduce using rule 76 (initializer)
    FLOAT        [reduce using rule 86 (val)]
    BOOL         reduce using rule 76 (initializer)
    BOOL         [reduce using rule 86 (val)]
    STRING       reduce using rule 76 (initializer)
    STRING       [reduce using rule 86 (val)]
    VOID         reduce using rule 76 (initializer)
    VOID         [reduce using rule 86 (val)]
    $default     reduce using rule 76 (initializer)


State 132

   17 expr: expr . COMMA assignment_expr
   78 initializer: expr .

    COMMA  shift, and go to state 61

    $default  reduce using rule 78 (initializer)


State 133

   10 declaration: type ID ASGN initializer .

    $default  reduce using rule 10 (declaration)


State 134

   13 declaration: type ID LB RB .
   64 compound_stat: type ID LB RB . LCB

    LCB  shift, and go to state 142

    $default  reduce using rule 13 (declaration)


State 135

   12 declaration: type ID LB parameter_list . RB
   63 compound_stat: type ID LB parameter_list . RB LCB
   80 parameter_list: parameter_list . COMMA parameter

    RB     shift, and go to state 143
    COMMA  shift, and go to state 144


State 136

   79 parameter_list: parameter .

    $default  reduce using rule 79 (parameter_list)


State 137

   81 parameter: type . ID

    ID  shift, and go to state 145


State 138

   59 compound_stat: IF LB expr RB LCB .

    $default  reduce using rule 59 (compound_stat)


State 139

   62 compound_stat: WHILE LB expr RB LCB .

    $default  reduce using rule 62 (compound_stat)


State 140

   17 expr: expr . COMMA assignment_expr
   60 compound_stat: RCB ELSE IF LB expr . RB LCB

    RB     shift, and go to state 146
    COMMA  shift, and go to state 61


State 141

   83 argument_list: argument_list COMMA argument .

    $default  reduce using rule 83 (argument_list)


State 142

   64 compound_stat: type ID LB RB LCB .

    $default  reduce using rule 64 (compound_stat)


State 143

   12 declaration: type ID LB parameter_list RB .
   63 compound_stat: type ID LB parameter_list RB . LCB

    LCB  shift, and go to state 147

    $default  reduce using rule 12 (declaration)


State 144

   80 parameter_list: parameter_list COMMA . parameter

    INT     shift, and go to state 23
    FLOAT   shift, and go to state 24
    BOOL    shift, and go to state 25
    STRING  shift, and go to state 26
    VOID    shift, and go to state 27

    parameter  go to state 148
    type       go to state 137


State 145

   81 parameter: type ID .

    $default  reduce using rule 81 (parameter)


State 146

   60 compound_stat: RCB ELSE IF LB expr RB . LCB

    LCB  shift, and go to state 149


State 147

   63 compound_stat: type ID LB parameter_list RB LCB .

    $default  reduce using rule 63 (compound_stat)


State 148

   80 parameter_list: parameter_list COMMA parameter .

    $default  reduce using rule 80 (parameter_list)


State 149

   60 compound_stat: RCB ELSE IF LB expr RB LCB .

    $default  reduce using rule 60 (compound_stat)
